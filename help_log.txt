----------------------------------------------------------------------
QUESTION AND ANSWERS ONLINE
----------------------------------------------------------------------

Question1:
I was confused on the openGL lectues in class, so I watched a lot of the videos
made by the following guy so that I can get a better understanding of what I am
actually working with:
Answer (Oct 2, 14:00)
https://www.youtube.com/watch?v=OR4fNpBjmq8&list=PLlrATfBNZ98foTJPJ_Ev03o2oq3-GGOS2&index=2&ab_channel=TheCherno

Question2:
What is glGetAttribLocation()?
Answer (Oct 2, 15:59)
glGetAttribLocation queries the previously linked program object specified by program for the attribute variable specified by name and returns the index of the generic vertex attribute that is bound to that attribute variable. If name is a matrix attribute variable, the index of the first column of the matrix is returned. If the named attribute variable is not an active attribute in the specified program object or if name starts with the reserved prefix "gl_", a value of -1 is returned.
https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGetAttribLocation.xhtml

Question3:
What is context in openGL?
Answer (Oct 2, 17:01)
Think of a context as an object that holds all of OpenGL; when a context is destroyed, OpenGL is destroyed. 
https://www.khronos.org/opengl/wiki/OpenGL_Context

Question4:
What exactly is Blinn-Phong shading and how is it different than Phong shading and Phong reflection?
Answer (Oct 2, 22:25)
https://learnopengl.com/Advanced-Lighting/Advanced-Lighting
https://emunix.emich.edu/~mevett/GraphicsCourse/Labs/MattsLab5Lighting/index.html

Question5:
Is there a built in distance function in GLSL?
Answer (Oct 3, 19:28)
https://stackoverflow.com/questions/38112526/why-do-people-use-sqrtdotdistancevector-distancevector-over-opengls-distan

Question6:
How to I use texelFetch()?
Answer (Oct 3, 20:16)
https://computergraphics.stackexchange.com/questions/7687/how-to-use-glsl-texelfetch
https://registry.khronos.org/OpenGL-Refpages/gl4/html/texelFetch.xhtml
https://stackoverflow.com/questions/45613310/switching-from-texture-to-texelfetch
https://stackoverflow.com/questions/45034150/trying-to-get-data-from-neighbour-fragments-with-texelfetch-in-glsl

Question7:
Formula to get from 2D coords to 1D coords?
Answer (Oct 3, 20:57)
https://stackoverflow.com/questions/1730961/convert-a-2d-array-index-into-a-1d-index

Question8:
I had some struggles getting creative withe the custom noise based post processed shader. I took inspiration from
many sources on shadertoy, I have linked many below
Answer (Oct 4, 10:16)
https://www.shadertoy.com/view/MtlyR8
https://www.shadertoy.com/view/Xd23Dh
https://www.shadertoy.com/view/ldl3W8


----------------------------------------------------------------------
COLLABORATORS
----------------------------------------------------------------------


----------------------------------------------------------------------
CODE I WANT TO KEEP FOR LATER (IGNORE)
----------------------------------------------------------------------
/*TRIED TO IMPLEMENT ISOLINES AND FAILED - KEEPING TO FIX LATER
vec3 WorleyNoise_2pass(vec2 uv) {
    float scale = 55;
    uv *= scale; // Now the space is scale x scale instead of 1x1. Change this to any number you want.
    vec2 uvInt = floor(uv); // grid cells always lie on integer intervals on the x and y axis
    vec2 uvFract = fract(uv); // fract is uv - floor(uv); is just the fraction remainder
    float minDist = 1000; // Minimum distance initialized to max of the grid cell diff.
    float minDist2 = 1000;
    vec2 NN = uv; // nearest neighbor point!!
    vec2 NN2 = uv; // 2nd nearest neighbor point!!
    vec2 minDiff; // the vector between current fragment and the nearest neighbor pt
    vec2 minN; // the nearest neighbor cell direction

    // ------------------------------------------------------------
    // Classic voronoi
    // ------------------------------------------------------------
    for(int y = -1; y <= 1; ++y) {
        for(int x = -1; x <= 1; ++x) {
            vec2 neighbor = vec2(float(x), float(y)); // Direction in which neighbor cell lies
            vec2 point = rand2(uvInt + neighbor); // Get the Voronoi centerpoint for the neighboring cell
            point = 0.5 + 0.5 * sin(float(u_Time) * .1 + 6.2831 * point); // point now moves around!
            vec2 diff = neighbor + point - uvFract; // Distance between fragment coord and neighbor’s Voronoi point

            // ------------------------------------------------------------
            // Choose the distance calculation type below
            // ------------------------------------------------------------
            float dist = length(diff); // l2 norm of the diff vector
//            float dist = abs(diff.x) + abs(diff.y); // l1 norm of the diff vector (Manhattan dist)
//            diff = abs(diff); float dist = max(diff.x, diff.y); // linf norm of the diff vector (Chebyshev distance)

            // Update the closest attributes
            if (dist < minDist)
            {
                minDist2 = minDist; // distance to 2nd nearest neighbor
                minDist = dist; // distance to nearest neighbor
                NN2 = NN; // to get the color of the second nearest neighbor
                NN = (uv + diff)/scale; // to get the color of the nearest neighbor to make mosaic
                minDiff = diff; // the vector between current fragment and the nearest neighbor pt
                minN = neighbor; // the nearest neighbor cell direction
            }
        }
    }

        // ------------------------------------------------------------
        // Second pass to get distance lines - inspired by: https://www.shadertoy.com/view/ldl3W8
        // ------------------------------------------------------------
        for(int y = -1; y <= 1; ++y) {
            for(int x = -1; x <= 1; ++x) {
                vec2 neighbor = minN + vec2(float(x), float(y)); // Direction in which neighbor cell lies
                vec2 point = rand2(uvInt + neighbor); // Get the Voronoi centerpoint for the neighboring cell
                point = 0.5 + 0.5 * sin(float(u_Time) * .1 + 6.2831 * point); // point now moves around!
                vec2 diff = neighbor + point - uvFract; // Distance between fragment coord and neighbor’s Voronoi point

                // ------------------------------------------------------------
                // Choose the distance calculation type below
                // ------------------------------------------------------------
                float dist = length(diff); // l2 norm of the diff vector
    //            float dist = abs(diff.x) + abs(diff.y); // l1 norm of the diff vector (Manhattan dist)
//                diff = abs(diff); float dist = max(diff.x, diff.y); // linf norm of the diff vector (Chebyshev distance)

                // Update the closest attributes
                if (length(minDiff - diff) < 0.1)
                {
                    minDist = min(minDist, dot(0.5*(minDiff + diff), normalize(diff - minDiff)));
                }
            }
    }
    return vec3(minDist, minDiff);
}*/
